{"version":3,"sources":["UncontroledOnOf/UncontroledOnOf.tsx","Rating/ControlledRating.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["UncontroledOnOf","props","console","log","useState","defaultValue","on","setOn","onStyle","width","height","border","display","padding","backgroundColor","offStyle","marginLeft","indicatorStyle","borderRadius","style","onClick","onChange","ControlledRating","Star","selected","value","React","memo","App","onOf","setOnOf","ratingValue","setRatingValue","count","setState","useEffect","document","title","className","toString","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gPAOO,SAASA,EAAgBC,GAC5BC,QAAQC,IAAI,mBADoC,MAE9BC,qBAASH,EAAMI,cAAeJ,EAAMI,cAFN,mBAE3CC,EAF2C,KAEvCC,EAFuC,KAI1CC,EAAU,CACZC,MAAO,OACPC,OAAQ,OACRC,OAAQ,kBACRC,QAAS,eACTC,QAAS,MACTC,gBAAiBR,EAAK,QAAU,SAE9BS,EAAW,CACbN,MAAO,OACPC,OAAQ,OACRC,OAAQ,kBACRC,QAAS,eACTI,WAAY,MACZH,QAAS,MACTC,gBAAiBR,EAAK,QAAU,OAE9BW,EAAiB,CACnBR,MAAO,OACPC,OAAQ,OACRQ,aAAc,MACdP,OAAQ,kBACRC,QAAS,eACTI,WAAY,MACZF,gBAAiBR,EAAK,QAAU,OAYpC,OAAO,6BACH,yBAAKa,MAAOX,EAASY,QAVP,WACdb,GAAM,GACNN,EAAMoB,UAAS,KAQf,MAEA,yBAAKF,MAAOJ,EAAUK,QARP,WACfb,GAAM,GACNN,EAAMoB,UAAS,KAMf,MAEA,yBAAKF,MAAOF,K,MCrCb,SAASK,EAAiBrB,GAC7B,OACI,6BACI,kBAACsB,EAAD,CAAMC,SAAUvB,EAAMwB,MAAQ,EAAGL,QAASnB,EAAMmB,QAASK,MAAO,IAChE,kBAACF,EAAD,CAAMC,SAAUvB,EAAMwB,MAAQ,EAAGL,QAASnB,EAAMmB,QAASK,MAAO,IAChE,kBAACF,EAAD,CAAMC,SAAUvB,EAAMwB,MAAQ,EAAGL,QAASnB,EAAMmB,QAASK,MAAO,IAChE,kBAACF,EAAD,CAAMC,SAAUvB,EAAMwB,MAAQ,EAAGL,QAASnB,EAAMmB,QAASK,MAAO,IAChE,kBAACF,EAAD,CAAMC,SAAUvB,EAAMwB,MAAQ,EAAGL,QAASnB,EAAMmB,QAASK,MAAO,KAW5E,IAAMF,EAAOG,IAAMC,MANnB,SAAkB1B,GACd,OAAO,0BAAMmB,QAAS,WAClBnB,EAAMmB,QAAQnB,EAAMwB,SACpBxB,EAAMuB,SAAW,oCAAe,YCzBjC,SAASI,IAAO,IAAD,EAEmBxB,oBAAkB,GAFrC,gCAGIA,oBAAkB,IAHtB,mBAGbyB,EAHa,KAGPC,EAHO,OAIkB1B,mBAA0B,GAJ5C,mBAIb2B,EAJa,KAIAC,EAJA,OAKM5B,mBAAS,GALf,mBAKb6B,EALa,KAKNC,EALM,KAUlB,OAJAC,qBAAU,WACNC,SAASC,MAAT,sBAAgCJ,EAAhC,aAIA,yBAAKK,UAAW,OACZ,yBAAKA,UAAU,mBACX,kBAACtC,EAAD,CAAiBqB,SAAUS,IAAWD,EAAKU,YAE/C,yBAAKD,UAAU,mBACX,kBAAChB,EAAD,CAAkBG,MAAOM,EAAaX,QAASY,KAEnD,yBAAKM,UAAU,mBACX,4BAAQlB,QAAS,kBAAMc,EAASD,EAAQ,KAAxC,SACA,6BAAMA,KCbFO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFX,SAASY,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.197dcbb8.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\ntype OnPropsType = {\r\n    onChange: (on: boolean) => void\r\n    defaultValue?: boolean\r\n}\r\n\r\nexport function UncontroledOnOf(props: OnPropsType) {\r\n    console.log('onOff rendering')\r\n    let [on, setOn] = useState(props.defaultValue ? props.defaultValue : false);\r\n\r\n    const onStyle = {\r\n        width: '30px',\r\n        height: '20px',\r\n        border: '1px solid black',\r\n        display: 'inline-block',\r\n        padding: '2px',\r\n        backgroundColor: on ? 'green' : 'white',\r\n    };\r\n    const offStyle = {\r\n        width: '30px',\r\n        height: '20px',\r\n        border: '1px solid black',\r\n        display: 'inline-block',\r\n        marginLeft: '2px',\r\n        padding: '2px',\r\n        backgroundColor: on ? 'white' : 'red',\r\n    };\r\n    const indicatorStyle = {\r\n        width: '10px',\r\n        height: '10px',\r\n        borderRadius: '5px',\r\n        border: '1px solid black',\r\n        display: 'inline-block',\r\n        marginLeft: '5px',\r\n        backgroundColor: on ? 'green' : 'red',\r\n    }\r\n\r\n    const onClicked = () => {\r\n        setOn(true)\r\n        props.onChange(true)\r\n    }\r\n    const offClicked = () => {\r\n        setOn(false)\r\n        props.onChange(false)\r\n    }\r\n\r\n    return <div>\r\n        <div style={onStyle} onClick={onClicked}>On\r\n        </div>\r\n        <div style={offStyle} onClick={offClicked}>Of\r\n        </div>\r\n        <div style={indicatorStyle}></div>\r\n    </div>\r\n}\r\n\r\n\r\n","import React from 'react';\r\n\r\nexport type RatingValueType = 0 | 1 | 2 | 3 | 4 | 5;\r\n\r\ntype PropsType = {\r\n    value: RatingValueType\r\n    onClick: (value: RatingValueType) => void\r\n}\r\n\r\ntype StarPropsType = {\r\n    selected: boolean\r\n    onClick: (value: RatingValueType) => void\r\n    value: RatingValueType\r\n}\r\n\r\nexport function ControlledRating(props: PropsType) {\r\n    return (\r\n        <div>\r\n            <Star selected={props.value > 0} onClick={props.onClick} value={1}/>\r\n            <Star selected={props.value > 1} onClick={props.onClick} value={2}/>\r\n            <Star selected={props.value > 2} onClick={props.onClick} value={3}/>\r\n            <Star selected={props.value > 3} onClick={props.onClick} value={4}/>\r\n            <Star selected={props.value > 4} onClick={props.onClick} value={5}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction StarItem(props: StarPropsType) {\r\n    return <span onClick={() => {\r\n        props.onClick(props.value)\r\n    }}>{props.selected ? <b>star </b> : 'star '}</span>\r\n}\r\n\r\nconst Star = React.memo(StarItem)\r\n","import React, {useEffect, useState} from 'react';\r\nimport {UncontroledOnOf} from './UncontroledOnOf/UncontroledOnOf';\r\nimport './App.css';\r\nimport {ControlledRating, RatingValueType} from './Rating/ControlledRating';\r\n\r\nexport function App() {\r\n\r\n    let [collapsedValue, setCollapsed] = useState<boolean>(true)\r\n    let [onOf, setOnOf] = useState<boolean>(true)\r\n    let [ratingValue, setRatingValue] = useState<RatingValueType>(4)\r\n    let [count, setState] = useState(0)\r\n    useEffect(() => {\r\n        document.title = `you clicked ${count} times`\r\n    })\r\n\r\n    return (\r\n        <div className={'App'}>\r\n            <div className='element_wrapper'>\r\n                <UncontroledOnOf onChange={setOnOf}/>{onOf.toString()}\r\n            </div>\r\n            <div className='element_wrapper'>\r\n                <ControlledRating value={ratingValue} onClick={setRatingValue}/>\r\n            </div>\r\n            <div className='element_wrapper'>\r\n                <button onClick={() => setState(count + 1)}>click</button>\r\n                <div>{count}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype PageTitlePropsType = {\r\n    title: string\r\n}\r\n\r\nfunction PageTitle(props: PageTitlePropsType) {\r\n    return (\r\n        <h1>{props.title}</h1>\r\n    );\r\n}\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {App} from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}